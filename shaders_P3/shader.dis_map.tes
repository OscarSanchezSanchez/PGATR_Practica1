#version 400

layout(triangles, equal_spacing, ccw) in;

in vec3 tcNormal[];
in vec3 tcPos[];
in vec2 tcTexCoord[];

uniform mat4 modelViewProj;
uniform sampler2D colorTex;

out vec3 teNormal;
out vec3 tePos;
out vec2 teTexCoord;

float gDispFactor = 0.3f;
 
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main()
{
     // Interpolate the attributes of the output vertex using the barycentric coordinates
    teTexCoord = interpolate2D(tcTexCoord[0], tcTexCoord[1], tcTexCoord[2]);
    teNormal = interpolate3D(tcNormal[0], tcNormal[1], tcNormal[2]);
    teNormal = normalize(teNormal);
    tePos = interpolate3D(tcPos[0], tcPos[1], tcPos[2]);

    // Displace the vertex along the normal
    float Displacement = texture(colorTex, teTexCoord.xy).x;
    tePos += teNormal * Displacement * gDispFactor;
    gl_Position = modelViewProj * vec4(tePos, 1.0);
}
