#version 430 compatibility
#extension GL_ARB_compute_shader: enable
#extension GL_ARB_shader_storage_buffer_object: enable

layout (std140, binding=4) buffer Pos
{
	vec4 Positions[ ];
};

layout (std140, binding=5) buffer Vel
{
	vec4 Velocities[ ];
};

layout (std140, binding=6) buffer Old
{
	vec4 oldPositions[ ];
};

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

void bitonicSort(const uint stage, const uint subStage, const uint direction) 
{
    uint sortIncreasing = direction;
    uint threadId = gl_GlobalInvocationID.x;
    // Determine where to conduct the bitonic split
    // by locating the middle-point of this 1D array
    uint distanceBetweenPairs = 1 << (stage - subStage);
    uint blockWidth = 2 * distanceBetweenPairs;
    // Determine the left and right indexes to data referencing
    uint leftId = (threadId % distanceBetweenPairs) + (threadId / distanceBetweenPairs) * blockWidth;
    uint rightId = leftId + distanceBetweenPairs;
    float leftElement = Positions[leftId].z;
    float rightElement = Positions[rightId].z;
    // Threads are divided into blocks of size
    // 2^sameDirectionBlockWidth
    // and its used to build bitonic subsequences s.t the sorting is
    // monotically increasing on the left and decreasing on the right
    uint sameDirectionBlockWidth = 1 << stage;

    if((threadId/sameDirectionBlockWidth) % 2 == 1)
    {
        sortIncreasing = 1 - sortIncreasing;
    }
    float greater;
    float lesser;
    // perform pairwise comparison between two elements and depending
    // whether its to build the bitonic that is monotically increasing
    // and decreasing.
    if(leftElement > rightElement) 
    {
        greater = leftElement;
        lesser = rightElement;
    } 
    else 
    {
        greater = rightElement;
        lesser = leftElement;
    }
    if(sortIncreasing == 1) 
    {
        Positions[leftId] = lesser;
        input[rightId] = greater;
    } 
    else 
    {
        input[leftId] = greater;
        input[rightId] = lesser;
    }
}

void main()
{

}